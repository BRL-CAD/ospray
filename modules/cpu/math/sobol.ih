// Copyright 2009 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// Copyright (c) 2012 Leonhard Gruenschloss (leonhard@gruenschloss.org)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

#ifdef OSPRAY_TARGET_DPCPP
#include "common/rkcommonDPCPPWrappers.h"
#include "rkcommon/math/rkmath.h"
using namespace rkcommon;
using namespace rkcommon::math;
#else
#include "rkcommon/math/math.ih"
#endif

#ifdef OSPRAY_TARGET_DPCPP
// TODO: Experiment with storing Sobol_matrices in a separate USM buffer
// instead of in global memory. Storing it in global memory like this
// will likely bloat the kernel size and register use, which will impact
// utilization and performance.
#include "math/sobol.ispc"
#endif

OSPRAY_BEGIN_ISPC_NAMESPACE

#define Sobol_numDimensions 1024
#define Sobol_numBits 52

#ifndef OSPRAY_TARGET_DPCPP
extern const uniform unsigned int
    Sobol_matrices[Sobol_numDimensions * Sobol_numBits];
#endif

// Compute one component of the Sobol'-sequence, where the component
// corresponds to the dimension parameter, and the index specifies
// the point inside the sequence. The scramble parameter can be used
// to permute elementary intervals, and might be chosen randomly to
// generate a randomized QMC sequence.
inline float Sobol_sample(unsigned int index,
    uniform unsigned int dimension,
    unsigned int scramble = 0)
{
  assert(dimension < Sobol_numDimensions);

  unsigned int result = scramble;
  for (uniform unsigned int i = dimension * Sobol_numBits; index;
       index >>= 1, ++i) {
    if (index & 1)
      result ^= Sobol_matrices[i];
  }

  return to_float_unorm(result);
}
OSPRAY_END_ISPC_NAMESPACE
